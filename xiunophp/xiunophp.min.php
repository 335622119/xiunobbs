<?php

/*
	
	XiunoPHP 4.0 只是定义了一些函数和全局变量，方便使用，并没有要求如何组织代码。
	XiunoPHP 4.0，采用简单结构，有利于 HHVM 编译 / opcode 缓存，完美支持 PHP7
	1. 不要 include 变量
	2. 不要采用 eval(), 正则表达式 e 修饰符
	3. 不要采用 autoload
	4. 不要采用 $$var 多重变量
	5. 不要使用 PHP 高级特性 __call __set __get 等魔术方法
	6. 尽量采用函数封装功能，通过前缀区分模块。
*/

!defined('DEBUG') AND define('DEBUG', 1); // 1: 开发模式， 2: 线上调试：日志记录，0: 关闭
!defined('APP_NAME') AND define('APP_NAME', 'www');

error_reporting(DEBUG ? E_ALL : 0);
version_compare(PHP_VERSION, '5.3.0', '<') AND set_magic_quotes_runtime(0);
$get_magic_quotes_gpc = get_magic_quotes_gpc();
$starttime = microtime(1);
$time = time();
@ob_start('ob_gzhandler');

// 头部，判断是否运行在命令行下
define('IN_CMD', !empty($_SERVER['SHELL']) || empty($_SERVER['REMOTE_ADDR']));
if(IN_CMD) {
	!isset($_SERVER['REMOTE_ADDR']) AND $_SERVER['REMOTE_ADDR'] = '';
	!isset($_SERVER['REQUEST_URI']) AND $_SERVER['REQUEST_URI'] = '';
	!isset($_SERVER['REQUEST_METHOD']) AND $_SERVER['REQUEST_METHOD'] = 'GET';
} else {
	header("Content-type: text/html; charset=utf-8");
	//header("Cache-Control: max-age=0;"); // 手机返回的时候回导致刷新
	//header("Cache-Control: no-store;");
	header("X-Powered-By: XiunoPHP 3.0");
}

// hook xiunophp_include_before.php

class db_mysql { public $conf = array(); public $wlink = NULL; public $rlink = NULL; public $link = NULL; public $errno = 0; public $errstr = ''; public $sqls = array(); public function __construct($conf) { $this->conf = $conf; } public function connect() { $this->wlink = $this->connect_master(); $this->rlink = $this->connect_slave(); return $this->wlink && $this->rlink; } public function connect_master() { if($this->wlink) return $this->wlink; $conf = $this->conf['master']; if(!$this->wlink) $this->wlink = $this->real_connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); return $this->wlink; } public function connect_slave() { if($this->rlink) return $this->rlink; if(empty($this->conf['slaves'])) { if($this->wlink === NULL) $this->wlink = $this->connect_master(); $this->rlink = $this->wlink; } else { $n = array_rand($this->conf['slaves']); $conf = $this->conf['slaves'][$n]; $this->rlink = $this->real_connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); } return $this->rlink; } public function real_connect($host, $user, $password, $name, $charset = '', $engine = '') { $link = @mysql_connect($host, $user, $password); if(!$link) { $this->error(mysql_errno(), '连接数据库服务器失败:'.mysql_error()); return FALSE; } if(!mysql_select_db($name, $link)) { $this->error(mysql_errno(), '选择数据库失败:'.mysql_error()); return FALSE; } strtolower($engine) == 'innodb' AND $this->query("SET innodb_flush_log_at_trx_commit=no", $link); $charset AND $this->query("SET names $charset, sql_mode=''", $link); return $link; } public function find_one($sql) { $query = $this->query($sql); if(!$query) return $query; return mysql_fetch_assoc($query); } public function find($sql, $key = NULL) { $query = $this->query($sql); if(!$query) return $query; $arrlist = array(); while($arr = mysql_fetch_assoc($query)) { $key ? $arrlist[$arr[$key]] = $arr : $arrlist[] = $arr; } return $arrlist; } public function query($sql, $link = NULL) { if(!$link) { if(!$this->rlink && !$this->connect_slave()) return FALSE;; $link = $this->link = $this->rlink; } $query = mysql_query($sql, $link); if($query === FALSE) $this->error(); if(count($this->sqls) < 1000) $this->sqls[] = $sql; return $query; } public function exec($sql, $link = NULL) { if(!$link) { if(!$this->wlink && !$this->connect_master()) return FALSE; $link = $this->link = $this->wlink; } $query = mysql_query($sql, $this->wlink); if(count($this->sqls) < 1000) $this->sqls[] = $sql; if($query !== FALSE) { $pre = strtoupper(substr(trim($sql), 0, 7)); if($pre == 'INSERT ' || $pre == 'REPLACE') { return mysql_insert_id($this->wlink); } elseif($pre == 'UPDATE ' || $pre == 'DELETE ') { return mysql_affected_rows($this->wlink); } } else { $this->error(); } return $query; } public function count($table, $cond = array()) { $cond = cond_to_sqladd($cond); $sql = "SELECT COUNT(*) AS num FROM `$table` $cond"; $arr = $this->find_one($sql); return !empty($arr) ? intval($arr['num']) : $arr; } public function maxid($table, $field) { $sql = "SELECT MAX($field) AS maxid FROM `$table`"; $arr = $this->find_one($sql); return !empty($arr) ? intval($arr['maxid']) : $arr; } public function version() { $r = $this->find_one("SELECT VERSION() AS v"); return $r['v']; } public function error($errno = 0, $errstr = '') { $this->errno = $errno ? $errno : ($this->link ? mysql_errno($this->link) : mysql_errno()); $this->errstr = $errstr ? $errstr : ($this->link ? mysql_error($this->link) : mysql_error()); DEBUG AND trigger_error('Database Error:'.$this->errstr); } public function __destruct() { if($this->wlink) $this->wlink = NULL; if($this->rlink) $this->rlink = NULL; } } ?><?php
 class db_pdo_mysql { public $conf = array(); public $wlink = NULL; public $rlink = NULL; public $link = NULL; public $errno = 0; public $errstr = ''; public $sqls = array(); public function __construct($conf) { $this->conf = $conf; } public function connect() { $this->wlink = $this->connect_master(); $this->rlink = $this->connect_slave(); return $this->wlink && $this->rlink; } public function connect_master() { if($this->wlink) return $this->wlink; $conf = $this->conf['master']; $this->wlink = $this->real_connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); return $this->wlink; } public function connect_slave() { if($this->rlink) return $this->rlink; if(empty($this->conf['slaves'])) { if(!$this->wlink) $this->wlink = $this->connect_master(); $this->rlink = $this->wlink; } else { $n = array_rand($this->conf['slaves']); $conf = $this->conf['slaves'][$n]; $this->rlink = $this->real_connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); } return $this->rlink; } public function real_connect($host, $user, $password, $name, $charset = '', $engine = '') { if(strpos($host, ':') !== FALSE) { list($host, $port) = explode(':', $host); } else { $port = 3306; } try { $attr = array( PDO::ATTR_TIMEOUT => 5, PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION ); $link = new PDO("mysql:host=$host;port=$port;dbname=$name", $user, $password, $attr); } catch (Exception $e) { $this->error($e->getCode(), '连接数据库服务器失败:'.$e->getMessage()); return FALSE; } $charset AND $link->query("SET names $charset, sql_mode=''"); return $link; } public function find_one($sql) { $query = $this->query($sql); if(!$query) return $query; $query->setFetchMode(PDO::FETCH_ASSOC); return $query->fetch(); } public function find($sql, $key = NULL) { $query = $this->query($sql); if(!$query) return $query; $query->setFetchMode(PDO::FETCH_ASSOC); $arrlist = $query->fetchAll(); $key AND arrlist_change_key($arrlist, $key); return $arrlist; } public function query($sql) { if(!$this->rlink && !$this->connect_slave()) return FALSE; $link = $this->link = $this->rlink; try { $query = $link->query($sql); } catch (Exception $e) { $this->error($e->getCode(), $e->getMessage()); return FALSE; } if($query === FALSE) $this->error(); if(count($this->sqls) < 1000) $this->sqls[] = $sql; return $query; } public function exec($sql) { if(!$this->wlink && !$this->connect_master()) return FALSE; $link = $this->link = $this->wlink; try { $n = $link->exec($sql); } catch (Exception $e) { $this->error($e->getCode(), $e->getMessage()); return FALSE; } if(count($this->sqls) < 1000) $this->sqls[] = $sql; if($n !== FALSE) { $pre = strtoupper(substr(trim($sql), 0, 7)); if($pre == 'INSERT ' || $pre == 'REPLACE') { return $this->last_insert_id(); } } else { $this->error(); } return $n; } public function count($table, $cond = array()) { $cond = cond_to_sqladd($cond); $sql = "SELECT COUNT(*) AS num FROM `$table` $cond"; $arr = $this->find_one($sql); return !empty($arr) ? intval($arr['num']) : $arr; } public function maxid($table, $field) { $sql = "SELECT MAX($field) AS maxid FROM `$table`"; $arr = $this->find_one($sql); return !empty($arr) ? intval($arr['maxid']) : $arr; } public function last_insert_id() { return $this->wlink->lastinsertid(); } public function version() { $r = $this->find_one("SELECT VERSION() AS v"); return $r['v']; } public function error($errno = 0, $errstr = '') { $error = $this->link ? $this->link->errorInfo() : array(0, $errno, $errstr); $this->errno = $errno ? $errno : (isset($error[1]) ? $error[1] : 0); $this->errstr = $errstr ? $errstr : (isset($error[2]) ? $error[2] : ''); } public function __destruct() { if($this->wlink) $this->wlink = NULL; if($this->rlink) $this->rlink = NULL; } } ?><?php
 class db_pdo_sqlite { public $conf = array(); public $wlink = NULL; public $rlink = NULL; public $link = NULL; public $errno = 0; public $errstr = ''; public function __construct($conf) { $this->conf = $conf; } public function connect() { $this->wlink = $this->connect_master(); $this->rlink = $this->connect_slave(); return $this->wlink && $this->rlink; } public function connect_master() { if($this->wlink) return $this->wlink; $conf = $this->conf['master']; $this->wlink = $this->real_connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); return $this->wlink; } public function connect_slave() { if($this->rlink) return $this->rlink; if(empty($this->conf['slaves'])) { if(!$this->wlink) $this->wlink = $this->connect_master(); $this->rlink = $this->wlink; } else { $n = array_rand($this->conf['slaves']); $conf = $this->conf['slaves'][$n]; $this->rlink = $this->real_connect($conf['host'], $conf['user'], $conf['password'], $conf['name'], $conf['charset'], $conf['engine']); } return $this->rlink; } public function real_connect($host, $user, $password, $name, $charset = '', $engine = '') { $sqlitedb = "sqlite:$host"; try { $attr = array( PDO::ATTR_TIMEOUT => 5, PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION ); $link = new PDO($sqlitedb, $attr); } catch (Exception $e) { $this->error($e->getCode(), '连接数据库服务器失败:'.$e->getMessage()); return FALSE; } return $link; } public function find_one($sql) { $query = $this->query($sql); if(!$query) return $query; $query->setFetchMode(PDO::FETCH_ASSOC); return $query->fetch(); } public function find($sql, $key = NULL) { $query = $this->query($sql); if(!$query) return $query; $query->setFetchMode(PDO::FETCH_ASSOC); $arrlist = $query->fetchAll(); $key AND arrlist_change_key($arrlist, $key); return $arrlist; } public function query($sql) { if(!$this->rlink && !$this->connect_slave()) return FALSE; $link = $this->link = $this->rlink; $query = $link->query($sql); if($query === FALSE) $this->error(); if(count($this->sqls) < 1000) $this->sqls[] = $sql; return $query; } public function exec($sql) { if(!$this->wlink && !$this->connect_master()) return FALSE; $link = $this->link = $this->wlink; $n = $link->exec($sql); if(count($this->sqls) < 1000) $this->sqls[] = $sql; if($n !== FALSE) { $pre = strtoupper(substr(trim($sql), 0, 7)); if($pre == 'INSERT ' || $pre == 'REPLACE') { return $this->last_insert_id(); } } else { $this->error(); } return $n; } public function count($table, $cond = array()) { $cond = cond_to_sqladd($cond); $sql = "SELECT COUNT(*) AS num FROM `$table` $cond"; $arr = $this->find_one($sql); return !empty($arr) ? intval($arr['num']) : $arr; } public function maxid($table, $field) { $sql = "SELECT MAX($field) AS maxid FROM `$table`"; $arr = $this->find_one($sql); return !empty($arr) ? intval($arr['maxid']) : $arr; } public function last_insert_id() { return $this->wlink->lastinsertid(); } public function version() { $r = $this->find_one("SELECT VERSION() AS v"); return $r['v']; } public function error($errno = 0, $errstr = '') { $error = $this->link ? $this->link->errorInfo() : array(0, 0, ''); $this->errno = $errno ? $errno : (isset($error[1]) ? $error[1] : 0); $this->errstr = $errstr ? $errstr : (isset($error[2]) ? $error[2] : ''); DEBUG AND trigger_error('Database Error:'.$this->errstr); } public function __destruct() { if($this->wlink) $this->wlink = NULL; if($this->rlink) $this->rlink = NULL; } } ?><?php
 class cache_apc { public $conf = array(); public $link = NULL; public $errno = 0; public $errstr = ''; public function __construct($conf = array()) { if(!function_exists('apc_get')) { $this->error(1, 'APC 扩展没有加载，请检查您的 PHP 版本'); return FALSE; } $this->conf = $conf; } public function connect() { } public function set($k, $v, $life) { $k = APP_CACHE_PRE.$k; return apc_store($k, $v, $life); } public function get($k) { $k = APP_CACHE_PRE.$k; return apc_get($k); } public function delete($k) { $k = APP_CACHE_PRE.$k; return apc_delete($k); } public function truncate() { return apc_clear_cache('user'); } public function error($errno, $errstr) { $this->errno = $errno; $this->errstr = $errstr; } public function __destruct() { } } ?><?php
 class cache_memcached { public $conf = array(); public $link = NULL; public $errno = 0; public $errstr = ''; public function __construct($conf = array()) { if(!extension_loaded('Memcache') && !extension_loaded('Memcached') ) { $this->error(1, ' Memcached 扩展没有加载，请检查您的 PHP 版本'); return FALSE; } $this->conf = $conf; } public function connect() { $conf = $this->conf; if($this->link) return $this->link; if(extension_loaded('Memcache')) { $memcache = new Memcache; } elseif(extension_loaded('Memcached')) { $memcache = new Memcached; } else { $this->error(2, 'Memcache 扩展不存在。'); return FALSE; } $r = $memcache->connect($conf['host'], $conf['port']); if(!$r) { $this->error(3, '连接 Memcached 服务器失败。'); return FALSE; } $this->link = $memcache; return $this->link; } public function set($k, $v, $life = 0) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; $r = $this->link->set($k, $v, 0, $life); return $r; } public function get($k) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; $r = $this->link->get($k); return $r === FALSE ? NULL : $r; } public function delete($k) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; return $this->link->delete($k); } public function truncate() { if(!$this->link && !$this->connect()) return FALSE; return $this->link->flush(); } public function error($errno = 0, $errstr = '') { $this->errno = $errno; $this->errstr = $errstr; } public function __destruct() { } } ?><?php
 class cache_mysql { public $conf = array(); public $db = NULL; public $link = NULL; public $errno = 0; public $errstr = ''; public $table = 'bbs_cache'; public function __construct($conf = array()) { if(!is_array($conf)) { $this->db = $conf; } else { $this->conf = $conf; if(function_exists('mysql_connect')) { $db = new db_mysql($conf); $db->errstr AND $this->error($db->errno, $db->errstr); } elseif(class_exists('PDO')) { $db = new db_pdo_mysql($conf); $db->errstr AND $this->error($db->errno, $db->errstr); } else { $this->error(1, 'PHP 的 mysqllib, pdo_mysql 扩展没有加载'); } $this->db = $db; } } public function connect() { if($this->link) return $this->link; $db = $this->db; $this->link = $db->connect(); $db->errstr AND $this->error($db->errno, $db->errstr); return $this->link; } public function set($k, $v, $life = 0) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; $time = time(); $expiry = $life ? $time + $life : 0; $v = addslashes(xn_json_encode($v)); $r = $this->db->exec("REPLACE INTO `{$this->table}` SET k='$k',v='$v',expiry='$expiry'"); if($this->db->errno) $this->error($this->db->errno, $this->db->errstr); return $r !== FALSE; } public function get($k) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; $time = time(); $arr = $this->db->find_one("SELECT * FROM `{$this->table}` WHERE k='$k'"); if(!$arr) return NULL; if($arr['expiry'] && $time > $arr['expiry']) { $this->db->exec("DELETE FROM `{$this->table}` WHERE k='$k'", $this->link); return NULL; } return xn_json_decode($arr['v'], 1); } public function delete($k) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; $r = $this->db->exec("DELETE FROM `{$this->table}` WHERE k='$k'", $this->link); return empty($r) ? FALSE : TRUE; } public function truncate() { if(!$this->link && !$this->connect()) return FALSE; $r = $this->db->exec("TRUNCATE `{$this->table}`", $this->link); return TRUE; } public function error($errno = 0, $errstr = '') { $this->errno = $errno ? $errno : ($this->link ? mysql_errno($this->link) : mysql_errno()); $this->errstr = $errstr ? $errstr : ($this->link ? mysql_error($this->link) : mysql_error()); } public function __destruct() { } } ?><?php
 class cache_redis { public $conf = array(); public $link = NULL; public $errno = 0; public $errstr = ''; public function __construct($conf = array()) { if(!extension_loaded('Redis')) { $this->error(1, ' Redis 扩展没有加载'); return FALSE; } $this->conf = $conf; } public function connect() { if($this->link) return $this->link; $redis = new Redis; $r = $redis->connect('localhost', '6379'); if(!$r) { $this->error(2, '连接 Redis 服务器失败。'); return FALSE; } $this->link = $redis; return $this->link; } public function set($k, $v, $life = 0) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; $v = xn_json_encode($v); $r = $this->link->set($k, $v); $life AND $r AND $this->link->expire($k, $life); return $r; } public function get($k) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; $r = $this->link->get($k); return $r === FALSE ? NULL : xn_json_decode($r); } public function delete($k) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; return $this->link->del($k) ? TRUE : FALSE; } public function truncate() { if(!$this->link && !$this->connect()) return FALSE; return $this->link->flushdb(); } public function error($errno, $errstr) { $this->errno = $errno; $this->errstr = $errstr; } public function __destruct() { } } ?><?php
 class cache_saekv { public $conf = array(); public $link = NULL; public $errno = 0; public $errstr = ''; public function __construct($conf = array()) { if(!extension_loaded('SaeKV')) { $this->error(1, ' SaeKV 扩展没有加载，请检查您的 PHP 版本'); return FALSE; } $kv = new SaeKV(); $this->link = $kv; $this->conf = $conf; } public function connect() { if($this->link) return $this->link; $this->link->init(); return $this->link; } public function set($k, $v, $life = 0) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; $r = $this->link->set($k, $v, 0, $life); return $r; } public function get($k) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; return $this->link->get($k); } public function delete($k) { if(!$this->link && !$this->connect()) return FALSE; $k = APP_CACHE_PRE.$k; return $this->link->delete($k); } public function truncate() { if(!$this->link && !$this->connect()) return FALSE; $keys = $kv->pkrget(APP_CACHE_PRE, 100); foreach($keys as $k) { $this->delete($k); } return TRUE; } public function error($errno = 0, $errstr = '') { $this->errno = $errno; $this->errstr = $errstr; } public function __destruct() { } } ?><?php
 class cache_xcache { public $conf = array(); public $link = NULL; public $errno = 0; public $errstr = ''; public function __construct($conf = array()) { if(!function_exists('xcache_set')) { $this->error(1, 'Xcache 扩展没有加载，请检查您的 PHP 版本'); return FALSE; } $this->conf = $conf; } public function connect() { } public function set($k, $v, $life) { $k = APP_CACHE_PRE.$k; return xcache_set($k, $v, $life); } public function get($k) { $k = APP_CACHE_PRE.$k; return xcache_get($k); } public function delete($k) { $k = APP_CACHE_PRE.$k; return xcache_unset($k); } public function truncate() { xcache_unset_by_prefix(APP_CACHE_PRE); return TRUE; } public function error($errno, $errstr) { $this->errno = $errno; $this->errstr = $errstr; } public function __destruct() { } } ?><?php
 function db_new($dbconf) { if($dbconf) { switch ($dbconf['type']) { case 'mysql': $db = new db_mysql($dbconf['mysql']); break; case 'pdo_mysql': $db = new db_pdo_mysql($dbconf['pdo_mysql']); break; case 'pdo_sqlite': $db = new db_pdo_sqlite($dbconf['pdo_sqlite']); break; case 'pdo_mongodb': $db = new db_pdo_mongodb($dbconf['pdo_mongodb']); break; default: xn_message(-1, '不支持的 db type:'.$dbconf['type']); } if(!$db || ($db && $db->errstr)) { $errno = -1; $errstr = $db->errstr; return FALSE; } return $db; } return NULL; } function db_connect() { global $db; $r = $db->connect(); db_errno_errstr($r); return $r; } function db_close() { global $db; $r = $db->close(); db_errno_errstr($r); return $r; } function db_sql_find_one($sql) { global $db; if(!$db) return FALSE; $arr = $db->find_one($sql); db_errno_errstr($arr); return $arr; } function db_sql_find($sql, $key = NULL) { global $db; if(!$db) return FALSE; $arr = $db->find($sql, $key); db_errno_errstr($arr); return $arr; } function db_exec($sql) { global $db; if(!$db) return FALSE; DEBUG AND xn_log($sql, 'mysql_exec'); $n = $db->exec($sql); db_errno_errstr($n); return $n; } function db_count($table, $cond = array()) { global $db; $r = $db->count($table, $cond); db_errno_errstr($r); return $r; } function db_maxid($table, $field) { global $db; $r = $db->maxid($table, $field); db_errno_errstr($r); return $r; } function db_create($table, $arr) { return db_insert($table, $arr); } function db_insert($table, $arr) { $sqladd = db_array_to_sqladd($arr); if(!$sqladd) return FALSE; return db_exec("INSERT INTO `$table` SET $sqladd"); } function db_replace($table, $arr) { $sqladd = db_array_to_sqladd($arr); if(!$sqladd) return FALSE; return db_exec("REPLACE INTO `$table` SET $sqladd"); } function db_update($table, $cond, $update) { $condadd = db_cond_to_sqladd($cond); $sqladd = db_array_to_sqladd($update); if(!$sqladd) return FALSE; return db_exec("UPDATE `$table` SET $sqladd $condadd"); } function db_delete($table, $cond) { $condadd = db_cond_to_sqladd($cond); return db_exec("DELETE FROM `$table` $condadd"); } function db_read($table, $cond) { $sqladd = db_cond_to_sqladd($cond); $sql = "SELECT * FROM `$table` $sqladd"; return db_find_one($sql); } function db_find($table, $cond = array(), $orderby = array(), $page = 1, $pagesize = 10, $key = '', $abort = TRUE) { if(strtoupper(substr($table, 0, 7)) != 'SELECT ') { $cond = db_cond_to_sqladd($cond); $orderby = db_orderby_to_sqladd($orderby); $offset = ($page - 1) * $pagesize; return db_sql_find("SELECT * FROM `$table` $cond$orderby LIMIT $offset,$pagesize", $key, $abort); } else { $sql = $table; $key = $cond; $abort = $orderby; return db_sql_find($sql, $key, $abort); } } function db_find_one($table, $cond = array(), $orderby = array()) { if(strtoupper(substr($table, 0, 7)) != 'SELECT ') { $cond = db_cond_to_sqladd($cond); $orderby = db_orderby_to_sqladd($orderby); return db_sql_find_one("SELECT * FROM `$table` $cond$orderby LIMIT 1"); } else { $sql = $table; $abort = $cond; return db_sql_find_one($sql, $abort); } } function db_errno_errstr($r) { global $db, $erno, $errstr; if($r === FALSE && $db->errno != 0) { $errno = $db->errno; $errstr = db_errstr_safe($errno, $db->errstr); $s = "sql errno: ".$errno.", errstr: ".$errstr; xn_log($s, 'db_error'); } } function db_errstr_safe($errno, $errstr) { if(DEBUG) return $errstr; if($errno == 1049) { return '数据库名不存在，请手工创建'; } elseif($errno == 2003 ) { return '连接数据库服务器失败，请检查IP是否正确，或者防火墙设置'; } elseif($errno == 1024) { return '连接数据库失败'; } elseif($errno == 1045) { return '数据库账户密码错误'; } return $errstr; } function db_cond_to_sqladd($cond) { $s = ''; if(!empty($cond)) { $s = ' WHERE '; foreach($cond as $k=>$v) { if(!is_array($v)) { $v = addslashes($v); $s .= "$k='$v' AND "; } else { foreach($v as $k1=>$v1) { $v1 = addslashes($v1); $k1 == 'LIKE' AND $v1="%$v1%"; $s .= "$k$k1'$v1' AND "; } } } $s = substr($s, 0, -4); } return $s; } function db_orderby_to_sqladd($orderby) { $s = ''; if(!empty($orderby)) { $s .= ' ORDER BY '; $comma = ''; foreach($orderby as $k=>$v) { $s .= $comma."$k ".($v == 1 ? ' ASC ' : ' DESC '); $comma = ','; } } return $s; } function db_array_to_sqladd($arr) { $s = ''; foreach($arr as $k=>$v) { $v = addslashes($v); $op = substr($k, -1); if($op == '+' || $op == '-') { $k = substr($k, 0, -1); $s .= "`$k`=`$k`$op'$v',"; } else { $s .= "`$k`='$v',"; } } return substr($s, 0, -1); } function db_array_to_sql_update($arr) { $s = ''; foreach($arr as $k=>$v) { $v = addslashes($v); $op = substr($k, -1); if($op == '+' || $op == '-') { $k = substr($k, 0, -1); $s .= "`$k`=`$k`$op'$v',"; } else { $s .= "`$k`='$v',"; } } return substr($s, 0, -1); } ?><?php
 function cache_new($cacheconf) { global $db; if($cacheconf && $cacheconf['enable']) { switch ($cacheconf['type']) { case 'redis': $cache = new cache_redis($cacheconf['redis']); break; case 'memcached': $cache = new cache_memcached($cacheconf['memcached']); break; case 'mysql': $cache = new cache_mysql(!empty($cacheconf['mysql']) ? $cacheconf['mysql'] : $db); break; case 'xcache': $cache = new cache_xcache(); break; case 'apc': $cache = new cache_apc(); break; case 'saekv': $cache = new cache_saekv(); break; default: xn_message(-1, '不支持的 cache type:'.$conf['cache']['type']); } if(!$cache || ($cache && $cache->errstr)) xn_message(-1, $cache->errstr); return $cache; } return NULL; } function cache_get($k, $fromkv = FALSE) { global $cache, $db; if(!$cache) return $db ? kv_get($k) : FALSE; $r = $cache->get($k); if($r === FALSE && $cache->errno != 0) { xn_message(-1, $cache->errstr); } elseif($r === NULL && $fromkv) { $r = kv_get($k); cache_set($k, $r); return $r; } return $r; } function cache_set($k, $v, $life = 0) { global $cache, $db; if(!$cache) return $db ? kv_set($k, $v, $life) : FALSE; $r = $cache->set($k, $v, $life); if($r === FALSE && $cache->errno != 0) { xn_message(-1, $cache->errstr); } return $r; } function cache_delete($k) { global $cache, $db; if(!$cache) return $db ? kv_delete($k) : FALSE; $r = $cache->delete($k); if($r === FALSE && $cache->errno != 0) { xn_message(-1, $cache->errstr); } return $r; } function cache_truncate() { global $cache; if(!$cache) return FALSE; $r = $cache->truncate(); if($r === FALSE && $cache->errno != 0) { xn_message(-1, $cache->errstr); } return $r; } ?><?php
 function form_radio_yes_no($name, $checked = 0) { $checked = intval($checked); return form_radio($name, array(1=>'是', 0=>'否'), $checked); } function form_radio($name, $arr, $checked = 0) { empty($arr) && $arr = array('否', '是'); $s = ''; foreach((array)$arr as $k=>$v) { $add = $k == $checked ? ' checked="checked"' : ''; $s .= "<label><input type=\"radio\" name=\"$name\" value=\"$k\" class=\"noborder\"$add />$v</label> &nbsp; \r\n"; } return $s; } function form_select($name, $arr, $checked = 0, $id = TRUE) { if(empty($arr)) return ''; $idadd = $id === TRUE ? "id=\"$name\"" : ($id ? "id=\"$id\"" : ''); $s = "<select name=\"$name\" class=\"form-control\" $idadd> \r\n"; $s .= form_options($arr, $checked); $s .= "</select> \r\n"; return $s; } function form_options($arr, $checked = 0) { $s = ''; foreach((array)$arr as $k=>$v) { $add = $k == $checked ? ' selected="selected"' : ''; $s .= "<option value=\"$k\"$add>$v</option> \r\n"; } return $s; } function form_text($name, $value, $width = FALSE) { $style = ''; if($width !== FALSE) { is_numeric($width) AND $width .= 'px'; $style = " style=\"width: $width\""; } $s = "<input type=\"text\" name=\"$name\" id=\"$name\" value=\"$value\" class=\"form-control\"$style />"; return $s; } function form_hidden($name, $value) { $s = "<input type=\"hidden\" name=\"$name\" id=\"$name\" value=\"$value\" />"; return $s; } function form_textarea($name, $value, $width = FALSE, $height = FALSE) { $style = ''; if($width !== FALSE) { is_numeric($width) AND $width .= 'px'; is_numeric($height) AND $height .= 'px'; $style = " style=\"width: $width; height: $height; \""; } $s = "<textarea name=\"$name\" id=\"$name\" class=\"form-control\" $style>$value</textarea>"; return $s; } function form_password($name, $value, $width = FALSE) { $style = ''; if($width !== FALSE) { is_numeric($width) AND $width .= 'px'; $style = " style=\"width: $width\""; } $s = "<input type=\"password\" name=\"$name\" id=\"$name\" class=\"form-control\" value=\"$value\" $style />"; return $s; } function form_time($name, $value, $width = FALSE) { $style = ''; if($width !== FALSE) { is_numeric($width) AND $width .= 'px'; $style = " style=\"width: $width\""; } $s = "<input type=\"text\" name=\"$name\" id=\"$name\" class=\"form-control\" value=\"$value\" $style />"; return $s; } ?><?php
 function image_ext($filename) { return strtolower(substr(strrchr($filename, '.'), 1)); } function image_safe_name($filename, $dir) { global $time; $s1 = substr($filename, 0, strrpos($filename, '.')); $s2 = substr(strrchr($filename, '.'), 1); $s1 = preg_replace('#\W#', '_', $s1); $s2 = preg_replace('#\W#', '_', $s2); if(is_file($dir."$s1.$s2")) { $newname = $s1.$time.rand(1, 1000).'.'.$s2; } else { $newname = "$s1.$s2"; } return $newname; } function image_thumb_name($filename) { return substr($filename, 0, strrpos($filename, '.')).'_thumb'.strrchr($filename, '.'); } function image_rand_name($k) { global $time; return $time.'_'.rand(1000000000, 9999999999).'_'.$k; } function image_set_dir($id, $dir) { $id = sprintf("%09d", $id); $s1 = substr($id, 0, 3); $s2 = substr($id, 3, 3); $dir = $dir."$s1/$s2"; !is_dir($dir) && mkdir($dir, 0777, TRUE); return "$s1/$s2"; } function image_get_dir($id) { $id = sprintf("%09d", $id); $s1 = substr($id, 0, 3); $s2 = substr($id, 3, 3); return "$s1/$s2"; } function image_thumb($sourcefile, $destfile, $forcedwidth = 80, $forcedheight = 80) { $return = array('filesize'=>0, 'width'=>0, 'height'=>0); $destext = image_ext($destfile); if(!in_array($destext, array('gif', 'jpg', 'bmp', 'png'))) { return $return; } $imginfo = getimagesize($sourcefile); $src_width = $imginfo[0]; $src_height = $imginfo[1]; if($src_width == 0 || $src_height == 0) { return $return; } if(!function_exists('imagecreatefromjpeg')) { copy($sourcefile, $destfile); $return = array('filesize'=>filesize($destfile), 'width'=>$src_width, 'height'=>$src_height); return $return; } $src_scale = $src_width / $src_height; $des_scale = $forcedwidth / $forcedheight; if($src_width <= $forcedwidth && $src_height <= $forcedheight) { $des_width = $src_width; $des_height = $src_height; } elseif($src_scale >= $des_scale) { $des_width = ($src_width >= $forcedwidth) ? $forcedwidth : $src_width; $des_height = $des_width / $src_scale; $des_height = ($des_height >= $forcedheight) ? $forcedheight : $des_height; } else { $des_height = ($src_height >= $forcedheight) ? $forcedheight : $src_height; $des_width = $des_height * $src_scale; $des_width = ($des_width >= $forcedwidth) ? $forcedwidth : $des_width; } switch ($imginfo['mime']) { case 'image/jpeg': $img_src = imagecreatefromjpeg($sourcefile); !$img_src && $img_src = imagecreatefromgif($sourcefile); break; case 'image/gif': $img_src = imagecreatefromgif($sourcefile); !$img_src && $img_src = imagecreatefromjpeg($sourcefile); break; case 'image/png': $img_src = imagecreatefrompng($sourcefile); break; case 'image/wbmp': $img_src = imagecreatefromwbmp($sourcefile); break; default : return $return; } if(!$img_src) return $return; $img_dst = imagecreatetruecolor($des_width, $des_height); imagefill($img_dst, 0, 0 , 0xFFFFFF); imagecopyresampled($img_dst, $img_src, 0, 0, 0, 0, $des_width, $des_height, $src_width, $src_height); $tmppath = ini_get('upload_tmp_dir').'/'; $tmppath == '/' AND $tmppath = './tmp/'; $tmpfile = $tmppath.md5($destfile).'.tmp'; switch($destext) { case 'jpg': imagejpeg($img_dst, $tmpfile, 90); break; case 'gif': imagegif($img_dst, $tmpfile); break; case 'png': imagepng($img_dst, $tmpfile); break; } $r = array('filesize'=>filesize($tmpfile), 'width'=>$des_width, 'height'=>$des_height);; copy($tmpfile, $destfile); is_file($tmpfile) && unlink($tmpfile); imagedestroy($img_dst); return $r; } function image_clip($sourcefile, $destfile, $clipx, $clipy, $clipwidth, $clipheight) { $getimgsize = getimagesize($sourcefile); if(empty($getimgsize)) { return 0; } else { $imgwidth = $getimgsize[0]; $imgheight = $getimgsize[1]; if($imgwidth == 0 || $imgheight == 0) { return 0; } } if(!function_exists('imagecreatefromjpeg')) { copy($sourcefile, $destfile); return filesize($destfile); } switch($getimgsize[2]) { case 1 : $imgcolor = imagecreatefromgif($sourcefile); break; case 2 : $imgcolor = imagecreatefromjpeg($sourcefile); break; case 3 : $imgcolor = imagecreatefrompng($sourcefile); break; } if(!$imgcolor) return 0; $img_dst = imagecreatetruecolor($clipwidth, $clipheight); imagefill($img_dst, 0, 0 , 0xFFFFFF); imagecopyresampled($img_dst, $imgcolor, 0, 0, $clipx, $clipy, $imgwidth, $imgheight, $imgwidth, $imgheight); $tmppath = ini_get('upload_tmp_dir').'/'; $tmppath == '/' AND $tmppath = './tmp/'; $tmpfile = $tmppath.md5($destfile).'.tmp'; imagejpeg($img_dst, $tmpfile, 100); $n = filesize($tmpfile); copy($tmpfile, $destfile); is_file($tmpfile) && @unlink($tmpfile); return $n; } function image_clip_thumb($sourcefile, $destfile, $forcedwidth = 80, $forcedheight = 80) { $getimgsize = getimagesize($sourcefile); if(empty($getimgsize)) { return 0; } else { $src_width = $getimgsize[0]; $src_height = $getimgsize[1]; if($src_width == 0 || $src_height == 0) { return 0; } } $src_scale = $src_width / $src_height; $des_scale = $forcedwidth / $forcedheight; if($src_width <= $forcedwidth && $src_height <= $forcedheight) { $des_width = $src_width; $des_height = $src_height; $n = image_clip($sourcefile, $destfile, 0, 0, $des_width, $des_height); return filesize($destfile); } elseif($src_scale >= $des_scale) { $des_height = $src_height; $des_width = $src_height / $des_scale; $n = image_clip($sourcefile, $destfile, 0, 0, $des_width, $des_height); if($n <= 0) return 0; $r = image_thumb($destfile, $destfile, $forcedwidth, $forcedheight); return $r['filesize']; } else { $des_width = $src_width; $des_height = $src_width / $des_scale; $n = image_clip($sourcefile, $destfile, 0, 0, $des_width, $des_height); if($n <= 0) return 0; $r = image_thumb($destfile, $destfile, $forcedwidth, $forcedheight); return $r['filesize']; } } function image_safe_thumb($sourcefile, $id, $ext, $dir1, $forcedwidth, $forcedheight, $randomname = 0) { global $time, $ip; $dir2 = image_set_dir($id, $dir1); $filename = $randomname ? md5(rand(0, 1000000000).$time.$ip).$ext : $id.$ext; $filepath = "$dir1$dir2/$filename"; $arr = image_thumb($sourcefile, $filepath, $forcedwidth, $forcedheight); $arr['fileurl'] = "$dir2/$filename"; return $arr; } ?><?php
 function array_value($arr, $key, $default = '') { return isset($arr[$key]) ? $arr[$key] : $default; } function array_addslashes(&$var) { if(is_array($var)) { foreach($var as $k=>&$v) { array_addslashes($v); } } else { $var = addslashes($var); } return $var; } function array_stripslashes(&$var) { if(is_array($var)) { foreach($var as $k=>&$v) { array_stripslashes($v); } } else { $var = stripslashes($var); } return $var; } function array_htmlspecialchars(&$var) { if(is_array($var)) { foreach($var as $k=>&$v) { array_htmlspecialchars($v); } } else { $var = str_replace(array('&', '"', '<', '>'), array('&amp;', '&quot;', '&lt;', '&gt;'), $var); } return $var; } function array_trim(&$var) { if(is_array($var)) { foreach($var as $k=>&$v) { array_trim($v); } } else { $var = trim($var); } return $var; } function array_diff_value($arr1, $arr2) { foreach ($arr1 as $k=>$v) { if(isset($arr2[$k]) && $arr2[$k] == $v ) unset($arr1[$k]); } return $arr1; } function arrlist_multisort(&$arrlist, $col, $asc = TRUE) { $colarr = array(); foreach($arrlist as $k=>$arr) { $colarr[$k] = $arr[$col]; } $asc = $asc ? SORT_ASC : SORT_DESC; array_multisort($colarr, $asc, $arrlist); return $arrlist; } function arrlist_cond_orderby($arrlist, $cond = array(), $orderby = array(), $page = 1, $pagesize = 20) { $resultarr = array(); if($cond) { foreach($arrlist as $key=>$val) { $ok = TRUE; foreach($cond as $k=>$v) { if(!isset($val[$k]) || $val[$k] != $v) { $ok = FALSE; break; } } if($ok) $resultarr[$key] = $val; } } else { $resultarr = $arrlist; } if($orderby) { list($k, $v) = each($orderby); arrlist_multisort($resultarr, $k, $v == 1); } $start = ($page - 1) * $pagesize; $resultarr = array_assoc_slice($resultarr, $start, $pagesize); return $resultarr; } function array_assoc_slice($arrlist, $start, $length = 0) { if(isset($arrlist[0])) return array_slice($arrlist, $start, $length); $keys = array_keys($arrlist); $keys2 = array_slice($keys, $start, $length); $retlist = array(); foreach ($keys2 as $key) { $retlist[$key] = $arrlist[$key]; } return $retlist; } function arrlist_key_values($arrlist, $key, $value) { $return = array(); if($key) { foreach((array)$arrlist as $arr) { $return[$arr[$key]] = $arr[$value]; } } else { foreach((array)$arrlist as $arr) { $return[] = $arr[$value]; } } return $return; } function arrlist_values($arrlist, $key) { if(!$arrlist) return array(); $return = array(); foreach($arrlist as &$arr) { $return[] = $arr[$key]; } return $return; } function arrlist_change_key(&$arrlist, $key, $pre = '') { $return = array(); if(empty($arrlist)) return $return; foreach($arrlist as &$arr) { $return[$pre.''.$arr[$key]] = $arr; } $arrlist = $return; } function arrlist_chunk($arrlist, $key) { $r = array(); if(empty($arrlist)) return $r; foreach($arrlist as &$arr) { !isset($r[$arr[$key]]) AND $r[$arr[$key]] = array(); $r[$arr[$key]][] = $arr; } return $r; } ?><?php
 function xn_encrypt($txt, $key = 'abcd9667676effff') { return xn_urlencode(base64_encode(xxtea_encrypt($txt, $key))); } function xn_decrypt($txt, $key = 'abcd9667676effff') { return xxtea_decrypt(base64_decode(xn_urldecode($txt)), $key); } function encrypt($txt, $key = 'abcd9667676effff') { return xn_encrypt($txt, $key); } function decrypt($txt, $key = 'abcd9667676effff') { return xn_decrypt($txt, $key); } function xxtea_long2str($v, $w) { $len = count($v); $n = ($len - 1) << 2; if ($w) { $m = $v[$len - 1]; if (($m < $n - 3) || ($m > $n)) return false; $n = $m; } $s = array(); for ($i = 0; $i < $len; $i++) { $s[$i] = pack("V", $v[$i]); } if ($w) { return substr(join('', $s), 0, $n); } else { return join('', $s); } } function xxtea_str2long($s, $w) { $v = unpack("V*", $s. str_repeat("\0", (4 - strlen($s) % 4) & 3)); $v = array_values($v); if ($w) { $v[count($v)] = strlen($s); } return $v; } function xxtea_int32($n) { while ($n >= 2147483648) $n -= 4294967296; while ($n <= -2147483649) $n += 4294967296; return (int)$n; } function xxtea_encrypt($str, $key) { if ($str == "") { return ""; } $v = xxtea_str2long($str, true); $k = xxtea_str2long($key, false); if (count($k) < 4) { for ($i = count($k); $i < 4; $i++) { $k[$i] = 0; } } $n = count($v) - 1; $z = $v[$n]; $y = $v[0]; $delta = 0x9E3779B9; $q = floor(6 + 52 / ($n + 1)); $sum = 0; while (0 < $q--) { $sum = xxtea_int32($sum + $delta); $e = $sum >> 2 & 3; for ($p = 0; $p < $n; $p++) { $y = $v[$p + 1]; $mx = xxtea_int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ xxtea_int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z)); $z = $v[$p] = xxtea_int32($v[$p] + $mx); } $y = $v[0]; $mx = xxtea_int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ xxtea_int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z)); $z = $v[$n] = xxtea_int32($v[$n] + $mx); } return xxtea_long2str($v, false); } function xxtea_decrypt($str, $key) { if ($str == "") { return ""; } $v = xxtea_str2long($str, false); $k = xxtea_str2long($key, false); if (count($k) < 4) { for ($i = count($k); $i < 4; $i++) { $k[$i] = 0; } } $n = count($v) - 1; $z = $v[$n]; $y = $v[0]; $delta = 0x9E3779B9; $q = floor(6 + 52 / ($n + 1)); $sum = xxtea_int32($q * $delta); while ($sum != 0) { $e = $sum >> 2 & 3; for ($p = $n; $p > 0; $p--) { $z = $v[$p - 1]; $mx = xxtea_int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ xxtea_int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z)); $y = $v[$p] = xxtea_int32($v[$p] - $mx); } $z = $v[$n]; $mx = xxtea_int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ xxtea_int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z)); $y = $v[0] = xxtea_int32($v[0] - $mx); $sum = xxtea_int32($sum - $delta); } return xxtea_long2str($v, true); } ?><?php
 function xn_message($code, $message) { global $ajax; echo $ajax ? xn_json_encode(array('code'=>$code, 'message'=>$message)) : $message; exit; } function xn_log_post_data() { global $method; if($method != 'POST') return; $post = $_POST; isset($post['password']) AND $post['password'] = '******'; isset($post['password_new']) AND $post['password_new'] = '******'; isset($post['password_old']) AND $post['password_old'] = '******'; xn_log(xn_json_encode($post), APP_NAME.'_post_data'); } function error_handle($errno, $errstr, $errfile, $errline) { global $time, $ajax; $br = ($ajax ? "\n" : "<br>\n"); IN_CMD AND $errstr = str_replace('<br>', "\n", $errstr); $s = $br."Error[$errno]: $errstr, File: $errfile, Line: $errline"; xn_log($s, 'php_error'); if(DEBUG) { echo $s.$br; $arr = debug_backtrace(); array_shift($arr); foreach($arr as $v) { $args = ''; if(!empty($v['args'])) foreach ($v['args'] as $v2) $args .= ($args ? ' , ' : '').(is_array($v2) ? 'array('.count($v2).')' : $v2); echo $br."File: $v[file], Line: $v[line], $v[function]($args) "; } echo $br; return TRUE; } else { return FALSE; } } function xn_error($no, $str, $return = FALSE) { global $errno, $errstr; $errno = $no; $errstr = $str; return $return; } function param($key, $defval = '', $safe = TRUE) { if(!isset($_REQUEST[$key]) || ($key === 0 && empty($_REQUEST[$key]))) { if(is_array($defval)) { return array(); } else { return $defval; } } $val = $_REQUEST[$key]; $val = param_force($val, $defval, $safe); return $val; } function param_force($val, $defval, $safe = TRUE) { global $get_magic_quotes_gpc; if(is_array($defval)) { $defval = empty($defval) ? '' : $defval[0]; if(is_array($val)) { foreach($val as &$v) { if(is_array($v)) { $v = $defval; } else { if(is_string($defval)) { $safe AND !$get_magic_quotes_gpc && $v = addslashes($v); !$safe AND $get_magic_quotes_gpc && $v = stripslashes($v); $safe AND $v = htmlspecialchars($v); } else { $v = intval($v); } } } } else { return array(); } } else { if(is_array($val)) { $val = $defval; } else { if(is_string($defval)) { $safe AND !$get_magic_quotes_gpc && $val = addslashes($val); !$safe AND $get_magic_quotes_gpc && $val = stripslashes($val); $safe AND $val = htmlspecialchars($val); } else { $val = intval($val); } } } return $val; } function lang($key, $arr = array()) { global $lang; if(!isset($lang[$key])) return 'lang['.$key.']'; $s = $lang[$key]; if(!empty($arr)) { foreach($arr as $k=>$v) { $s = str_replace('$'.$k, $v, $s); } } return $s; } function jump($message, $url = '', $delay = 3) { global $ajax; if($ajax) return $message; if(!$url) return $message; $htmladd = '<script>setTimeout(function() {window.location=\''.$url.'\'}, '.($delay * 1000).');</script>'; return '<a href="'.$url.'">'.$message.'</a>'.$htmladd; } function xn_urlencode($s) { $s = str_replace('-', '_2d', $s); $s = str_replace('.', '_2e', $s); $s = str_replace('+', '_2b', $s); $s = str_replace('=', '_3d', $s); $s = urlencode($s); $s = str_replace('%', '_', $s); return $s; } function xn_urldecode($s) { $s = str_replace('_', '%', $s); $s = urldecode($s); return $s; } function xn_json_encode($arg) { $r = ''; switch (gettype($arg)) { case 'array': $r = is_number_array($arg) ? xn_json_number_array_to_string($arg) : xn_json_assoc_array_to_string($arg); break; case 'object': return xn_json_encode(get_object_vars($arg)); break; case 'integer': case 'double': $r = is_numeric($arg) ? (string)$arg : 'null'; break; case 'string': $r = '"' . strtr($arg, array( "\r" => '\\r', "\n" => '\\n', "\t" => '\\t', "\b" => '\\b', "\f" => '\\f', '\\' => '\\\\', '"' => '\"', "\x00" => '\u0000', "\x01" => '\u0001', "\x02" => '\u0002', "\x03" => '\u0003', "\x04" => '\u0004', "\x05" => '\u0005', "\x06" => '\u0006', "\x07" => '\u0007', "\x08" => '\b', "\x0b" => '\u000b', "\x0c" => '\f', "\x0e" => '\u000e', "\x0f" => '\u000f', "\x10" => '\u0010', "\x11" => '\u0011', "\x12" => '\u0012', "\x13" => '\u0013', "\x14" => '\u0014', "\x15" => '\u0015', "\x16" => '\u0016', "\x17" => '\u0017', "\x18" => '\u0018', "\x19" => '\u0019', "\x1a" => '\u001a', "\x1b" => '\u001b', "\x1c" => '\u001c', "\x1d" => '\u001d', "\x1e" => '\u001e', "\x1f" => '\u001f' )) . '"'; break; case 'boolean': $r = $arg ? 1 : 0; break; default: $r = 'null'; } return $r; } function xn_json_number_array_to_string($arr) { $s = ''; foreach ($arr as $k=>$v) { $s .= ','.xn_json_encode($v); } $s = substr($s, 1); $r = '['.$s.']'; return $r; } function xn_json_assoc_array_to_string($arr) { $s = ''; foreach ($arr as $k=>$v) { $s .= ',"'.$k.'":'.xn_json_encode($v); } $s = substr($s, 1); $r = '{'.$s.'}'; return $r; } function is_number_array($arr) { $i = 0; foreach ($arr as $k=>$v) { if(!is_numeric($k) || $k != $i++) return FALSE; } return TRUE; } function xn_json_decode($json) { return json_decode($json, 1); } function pagination($url, $totalnum, $page, $pagesize = 20) { $totalpage = ceil($totalnum / $pagesize); if($totalpage < 2) return ''; $page = min($totalpage, $page); $shownum = 5; $start = max(1, $page - $shownum); $end = min($totalpage, $page + $shownum); $right = $page + $shownum - $totalpage; $right > 0 && $start = max(1, $start -= $right); $left = $page - $shownum; $left < 0 && $end = min($totalpage, $end -= $left); $s = ''; $page != 1 && $s .= '<li class="page-item"><a href="'.str_replace('{page}', $page-1, $url).'" class="page-link">◀</a></li>'."\r\n"; if($start > 1) $s .= '<li class="page-item"><a href="'.str_replace('{page}', 1, $url).'">1 '.($start > 2 ? '... ' : '').'</a></li>'."\r\n"; for($i=$start; $i<=$end; $i++) { if($i == $page) { $s .= '<li class="page-item"><a href="'.str_replace('{page}', $i, $url).'" class="page-link active">'.$i.'</a></li>'."\r\n"; } else { $s .= '<li class="page-item"><a href="'.str_replace('{page}', $i, $url).'" class="page-link">'.$i.'</a></li>'."\r\n"; } } if($end != $totalpage) $s .= '<li class="page-item"><a href="'.str_replace('{page}', $totalpage, $url).'" class="page-link">'.($totalpage - $end > 1 ? '... ' : '').$totalpage.'</a></li>'."\r\n"; $page != $totalpage && $s .= '<li class="page-item"><a href="'.str_replace('{page}', $page+1, $url).'" class="page-link">▶</a></li>'."\r\n"; return $s; } function pager($url, $totalnum, $page, $pagesize = 20) { $totalpage = ceil($totalnum / $pagesize); if($totalpage < 2) return ''; $page = min($totalpage, $page); $s = ''; $page > 1 AND $s .= '<li><a href="'.str_replace('{page}', $page-1, $url).'">上一页</a></li>'; $s .= " $page / $totalpage "; $totalnum >= $pagesize AND $page != $totalpage AND $s .= '<li><a href="'.str_replace('{page}', $page+1, $url).'">下一页</a></li>'; return $s; } function page($page, $n, $pagesize) { $total = ceil($n / $pagesize); $total < 1 AND $total = 1; return mid($page, 1, $total); } function mid($n, $min, $max) { if($n < $min) return $min; if($n > $max) return $max; return $n; } function humandate($timestamp) { global $time; $seconds = $time - $timestamp; if($seconds > 31536000) { return date('Y-n-j', $timestamp); } elseif($seconds > 2592000) { return floor($seconds / 2592000).'月前'; } elseif($seconds > 86400) { return floor($seconds / 86400).'天前'; } elseif($seconds > 3600) { return floor($seconds / 3600).'小时前'; } elseif($seconds > 60) { return floor($seconds / 60).'分钟前'; } else { return $seconds.'秒前'; } } function humannumber($num) { $num > 100000 && $num = ceil($num / 10000).'万'; return $num; } function humansize($num) { if($num > 1073741824) { return number_format($num / 1073741824, 2, '.', '').'G'; } elseif($num > 1048576) { return number_format($num / 1048576, 2, '.', '').'M'; } elseif($num > 1024) { return number_format($num / 1024, 2, '.', '').'K'; } else { return $num.'B'; } } function ip() { global $conf; $ip = '127.0.0.1'; if(empty($conf['cdn_on'])) { $ip = $_SERVER['REMOTE_ADDR']; } else { if(isset($_SERVER['HTTP_CDN_SRC_IP'])) { $ip = $_SERVER['HTTP_CDN_SRC_IP']; } elseif(isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; } elseif(isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; $arr = array_filter(explode(',', $ip)); $ip = end($arr); } else { $ip = $_SERVER['REMOTE_ADDR']; } } return long2ip(ip2long($ip)); } function xn_log($s, $file = 'error') { global $time, $ip, $conf, $uid; $day = date('Ymd', $time); $mtime = date('Y-m-d H:i:s'); $url = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : ''; $logpath = APP_LOG_PATH.$day; !is_dir($logpath) AND mkdir($logpath, 0777, true); $s = str_replace(array("\r\n", "\n", "\t"), ' ', $s); $s = "<?php exit;?>\t$mtime\t$ip\t$url\t$uid\t$s\r\n"; @error_log($s, 3, $logpath."/$file.php"); } function get__browser() { $browser = array( 'device'=>'pc', 'name'=>'chrome', 'version'=>30, ); $agent = _SERVER('HTTP_USER_AGENT'); if(strpos($agent, 'msie') !== FALSE || stripos($agent, 'trident') !== FALSE) { $browser['name'] = 'ie'; $browser['version'] = 8; preg_match('#msie\s*([\d\.]+)#is', $agent, $m); if(!empty($m[1])) { if(strpos($agent, 'compatible; msie 7.0;') !== FALSE) { $browser['version'] = 8; } else { $browser['version'] = intval($m[1]); } } else { preg_match('#Trident/([\d\.]+)#is', $agent, $m); if(!empty($m[1])) { $trident = intval($m[1]); $trident == 4 AND $browser['version'] = 8; $trident == 5 AND $browser['version'] = 9; $trident > 5 AND $browser['version'] = 10; } } } if(isset($_SERVER['HTTP_X_WAP_PROFILE']) || (isset($_SERVER['HTTP_VIA']) && stristr($_SERVER['HTTP_VIA'], "wap") || stripos($agent, 'phone') || stripos($agent, 'mobile') || strpos($agent, 'ipod'))) { $browser['device'] = 'mobile'; } elseif(strpos($agent, 'pad') !== FALSE) { $browser['device'] = 'pad'; $browser['name'] = ''; $browser['version'] = ''; } else { $robots = array('bot', 'spider', 'slurp'); foreach($robots as $robot) { if(strpos($agent, $robot) !== FALSE) { $browser['name'] = 'robot'; return $browser; } } } return $browser; } function check_browser($browser) { if($browser['name'] == 'ie' && $browser['version'] < 8) { include './view/htm/browser.htm'; exit; } } function is_robot() { $agent = _SERVER('HTTP_USER_AGENT'); $robots = array('bot', 'spider', 'slurp'); foreach($robots as $robot) { if(strpos($agent, $robot) !== FALSE) { return TRUE; } } return FALSE; } function browser_lang() { $accept = _SERVER('HTTP_ACCEPT_LANGUAGE'); $accept = substr($accept, 0, strpos($accept, ';')); if(strpos($accept, 'ko-kr') !== FALSE) { return 'ko-kr'; } else { return 'zh-cn'; } } function xn_init_query_string() { !empty($_SERVER['HTTP_X_REWRITE_URL']) AND $_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_REWRITE_URL']; !isset($_SERVER['REQUEST_URI']) AND $_SERVER['REQUEST_URI'] = ''; $_SERVER['REQUEST_URI'] = str_replace('/index.php?', '/', $_SERVER['REQUEST_URI']); $request_url = str_replace('/?', '/', $_SERVER['REQUEST_URI']); $arr = parse_url($request_url); $q = $arr['path']; $pos = strrpos($q, '/'); $pos === FALSE && $pos = -1; $q = substr($q, $pos + 1); if(substr($q, -4) == '.htm') $q = substr($q, 0, -4); $r = $q ? (array)explode('-', $q) : array(); if(!empty($arr['query'])) { parse_str($arr['query'], $arr2); $_SERVER['_GET'] = $arr2; $r += $arr2; } $_SERVER['REQUEST_URI_NO_PATH'] = substr($_SERVER['REQUEST_URI'], strrpos($_SERVER['REQUEST_URI'], '/') + 1); if(URL_REWRITE_PATH_FORMAT_ON) { $r = xn_init_query_string_by_path_formt($_SERVER['REQUEST_URI']) + $r; } isset($r[0]) AND $r[0] == 'index.php' AND $r[0] = 'index'; return $r; } function xn_init_query_string_by_path_formt($s) { $get = array(); substr($s, 0, 1) == '/' AND $s = substr($s, 1); $arr = explode('/', $s); $get = $arr; $last = array_pop($arr); if(strpos($last, '?') !== FALSE) { $get = $arr; $arr1 = explode('?', $last); parse_str($arr1[1], $arr2); $get[] = $arr1[0]; $get = array_merge($get, $arr2); } return $get; } function http_get($url, $timeout = 5, $times = 3) { $arr = array( 'http' => array( 'method'=> 'GET', 'timeout' => $timeout ) ); $stream = stream_context_create($arr); while($times-- > 0) { $s = file_get_contents($url, NULL, $stream, 0, 4096000); if($s !== FALSE) return $s; } return FALSE; } function http_post($url, $post = '', $timeout = 10, $times = 3) { $stream = stream_context_create(array('http' => array('header' => "Content-type: application/x-www-form-urlencoded\r\nx-requested-with: XMLHttpRequest", 'method' => 'POST', 'content' => $post, 'timeout' => $timeout))); while($times-- > 0) { $s = file_get_contents($url, NULL, $stream, 0, 4096000); if($s !== FALSE) return $s; } return FALSE; } function https_get($url, $timeout=30, $cookie = '') { return https_post($url, $timeout, '', $cookie); } function https_post($url, $timeout=30, $post = '', $cookie = '') { $w = stream_get_wrappers(); $allow_url_fopen = strtolower(ini_get('allow_url_fopen')); $allow_url_fopen = (empty($allow_url_fopen) || $allow_url_fopen == 'off') ? 0 : 1; if(extension_loaded('openssl') && in_array('https', $w) && $allow_url_fopen) { return file_get_contents($url); } elseif (!function_exists('curl_init')) { return xn_error(-1, 'server not installed curl.'); } $ch = curl_init(); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HEADER, 2); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); if($post) { curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $post); } if($cookie) { curl_setopt($ch, CURLOPT_HTTPHEADER, array("Cookie: $cookie")); } (!ini_get('safe_mode') && !ini_get('open_basedir')) && curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); $data = curl_exec($ch); if(curl_errno($ch)) { return xn_error(-1, 'Errno'.curl_error($ch)); } if(!$data) { curl_close($ch); return ''; } list($header, $data) = explode("\r\n\r\n", $data); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); if($http_code == 301 || $http_code == 302) { $matches = array(); preg_match('/Location:(.*?)\n/', $header, $matches); $url = trim(array_pop($matches)); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HEADER, false); $data = curl_exec($ch); } curl_close($ch); return $data; } function http_multi_get($urls) { if(!function_exists('curl_multi_init')) { $data = array(); foreach($urls as $k=>$url) { $data[$k] = https_get($url); } return $data; } $multi_handle = curl_multi_init(); foreach ($urls as $i => $url) { $conn[$i] = curl_init($url); curl_setopt($conn[$i], CURLOPT_RETURNTRANSFER, 1); $timeout = 3; curl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT, $timeout); curl_setopt($conn[$i], CURLOPT_FOLLOWLOCATION, 1); curl_multi_add_handle($multi_handle, $conn[$i]); } do{ $mrc = curl_multi_exec($multi_handle, $active); } while ($mrc == CURLM_CALL_MULTI_PERFORM); while($active and $mrc == CURLM_OK) { if(curl_multi_select($multi_handle) != - 1) { do{ $mrc = curl_multi_exec($multi_handle, $active); } while ($mrc == CURLM_CALL_MULTI_PERFORM); } } foreach($urls as $i => $url) { $data[$i] = curl_multi_getcontent($conn[$i]); curl_multi_remove_handle($multi_handle, $conn[$i]); curl_close($conn[$i]); } return $data; } function file_get_content_try($file, $times = 3) { while($times-- > 0) { $fp = fopen($file, 'rb'); if($fp) { $size = filesize($file); if($size == 0) return ''; $s = fread($fp, $size); fclose($fp); return $s; } else { sleep(1); } } return FALSE; } function file_put_content_try($file, $s, $times = 3) { while($times-- > 0) { $fp = fopen($file, 'wb'); if($fp AND flock($fp, LOCK_EX)){ $n = fwrite($fp, $s); version_compare(PHP_VERSION, '5.3.2', '>=') AND flock($fp, LOCK_UN); fclose($fp); clearstatcache(); return $n; } else { sleep(1); } } return FALSE; } function in_string($s, $str) { if(!$s || !$str) return FALSE; $s = ",$s,"; $str = ",$str,"; return strpos($str, $s) !== FALSE; } function move_upload_file($srcfile, $destfile) { $r = copy($srcfile, $destfile); return $r; } function file_ext($filename) { return strtolower(substr(strrchr($filename, '.'), 1)); } function file_pre($filename) { return substr($filename, 0, strrpos($filename, '.')); } function file_name($path) { return substr($path, strrpos($path, '/') + 1); } function t($name = '') { global $starttime; header("Time $name:".substr(microtime(1) - $starttime, 0, 7)); } function http_url_path() { $port = $_SERVER['SERVER_PORT']; $host = $_SERVER['HTTP_HOST']; $path = substr($_SERVER['PHP_SELF'], 0, strrpos($_SERVER['PHP_SELF'], '/')); $http = (($port == 443) || (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off')) ? 'https' : 'http'; return "$http://$host$path/"; } function url($url) { global $conf; !isset($conf['url_rewrite_on']) AND $conf['url_rewrite_on'] = 0; $r = $path = $query = ''; if(strpos($url, '/') !== FALSE) { $path = substr($url, 0, strrpos($url, '/') + 1); $query = substr($url, strrpos($url, '/') + 1); } else { $path = ''; $query = $url; } if($conf['url_rewrite_on'] == 0) { $r = $path . '?' . $query . '.htm'; } elseif($conf['url_rewrite_on'] == 1) { $r = $path . $query . '.htm'; } elseif($conf['url_rewrite_on'] == 2) { $r = $path . '?' . str_replace('-', '/', $query); } elseif($conf['url_rewrite_on'] == 3) { $r = $path . str_replace('-', '/', $query); } return $r; } function glob_recursive($pattern, $flags = 0) { $files = glob($pattern, $flags); foreach(glob(dirname($pattern).'/*', GLOB_ONLYDIR|GLOB_NOSORT) as $dir) { $files = array_merge($files, glob_recursive($dir.'/'.basename($pattern), $flags)); } return $files; } function rmdir_recusive($dir, $keepdir = 0) { if($dir == '/' || $dir == './' || $dir == '../') return FALSE; if(!is_dir($dir)) return FALSE; substr($dir, -1) != '/' AND $dir .= '/'; $dir2 = $dir.'*'; $files = glob($dir2); foreach($files as $file) { if($file == '.' || $file == '..') continue; if(!is_dir($file)) { unlink($file); } else { rmdir_recusive($file); } } if(!$keepdir) rmdir($dir); return TRUE; } function xn_rand($n = 16) { $str = '0123456789abcdefghijklmnopqrstuvwxyz'; $len = strlen($str); $return = ''; for($i=0; $i<$n; $i++) { $r = rand(1, $len); $return .= $str[$r - 1]; } return $return; } function xn_is_writable($file) { if(PHP_OS != 'WINNT') { return is_writable($file); } else { if(is_file($file)) { $fp = fopen($file, 'a+'); if(!$fp) return FALSE; fclose($fp); return TRUE; } elseif(is_dir($file)) { $tmpfile = $file.uniqid().'.tmp'; $r = touch($tmpfile); if(!$r) return FALSE; if(!is_file($tmpfile)) return FALSE; unlink($tmpfile); return TRUE; } else { return FALSE; } } } function xn_shutdown_handle() { } function xn_debug_info() { global $db, $starttime; $s = ''; if(DEBUG) { $s = '<div class="small">'; $s .= '<p>Processed Time:'.(microtime(1) - $starttime).'</p>'; if(IN_CMD) { foreach($db->sqls as $sql) { $s = "$sql\r\n"; } } else { $s ."\r\n<ul>\r\n"; foreach($db->sqls as $sql) { $s .= "<li>$sql</li>\r\n"; } $s .= "</ul>\r\n"; $s .= '_REQUEST:<pre>'; $s .= print_r($_REQUEST, 1); $s .= '</pre>'; } $s .= '</div>'; } return $s; } function http_404() { header('HTTP/1.1 404 Not Found'); header('Status: 404 Not Found'); echo '<h1>404 Not Found</h1>'; exit; } function http_403() { header('HTTP/1.1 403 Forbidden'); header('Status: 403 Forbidden'); echo '<h1>403 Forbidden</h1>'; exit; } function array_to_sqladd($arr) { return db_array_to_sqladd($arr); } function array_to_sql_update($arr, $old = array()) { return db_array_to_sql_update(array_diff($arr, $old)); } function cond_to_sqladd($cond) { return db_cond_to_sqladd($cond); } function orderby_to_sqladd($orderby) { return db_orderby_to_sqladd($orderby); } function _GET($k) { return isset($_GET[$k]) ? $_GET[$k] : NULL; } function _POST($k) { return isset($_POST[$k]) ? $_POST[$k] : NULL; } function _COOKIE($k) { return isset($_COOKIE[$k]) ? $_COOKIE[$k] : NULL; } function _REQUEST($k) { return isset($_REQUEST[$k]) ? $_REQUEST[$k] : NULL; } function _ENV($k) { return isset($_ENV[$k]) ? $_ENV[$k] : NULL; } function _SERVER($k) { return isset($_SERVER[$k]) ? $_SERVER[$k] : NULL; } function _SESSION($k) {global $g_session; return isset($_SESSION[$k]) ? $_SESSION[$k] : (isset($g_session[$k]) ? $g_session[$k] : NULL); } function GLOBALS($k) { return isset($GLOBALS[$k]) ? $GLOBALS[$k] : NULL; } function G($k) { return isset($GLOBALS[$k]) ? $GLOBALS[$k] : NULL; } 

// hook xiunophp_include_after.php

// ----------------------------------------------------------> 全局变量

empty($conf) AND $conf = array('db'=>NULL, 'cache'=>NULL, 'tmp_path'=>'./', 'log_path'=>'./', 'timezone'=>'Asia/Shanghai');
empty($uid) AND $uid = 0;

$upload_tmp_dir = ini_get('upload_tmp_dir');
!$upload_tmp_dir AND $upload_tmp_dir = './';
define('APP_TMP_PATH', empty($conf['tmp_path']) ? $upload_tmp_dir : $conf['tmp_path']);
define('APP_LOG_PATH', empty($conf['log_path']) ? './' : $conf['log_path']);
define('APP_CACHE_PRE', empty($conf['cache']['pre']) ? 'pre_' : $conf['cache']['pre']);
define('URL_REWRITE_PATH_FORMAT_ON', !empty($conf['url_rewrite_on']) && $conf['url_rewrite_on'] == 3);	// 是否开启 / 路径

$ip = ip();
// $ip = '220.166.164.200';
$longip = ip2long($ip);
$longip < 0 AND $longip = sprintf("%u", $longip); // fix 32 位 OS 下溢出的问题
$useragent = _SERVER('HTTP_USER_AGENT');

// 语言包变量
$lang = array();

// $_SERVER['REQUEST_METHOD'] === 'PUT' ? @parse_str(file_get_contents('php://input', false , null, -1 , $_SERVER['CONTENT_LENGTH']), $_PUT) : $_PUT = array(); // 不需要支持 PUT
$ajax = isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower(trim($_SERVER['HTTP_X_REQUESTED_WITH'])) == 'xmlhttprequest';
$method = $_SERVER['REQUEST_METHOD'];

// 全局的错误，进程下很方便。
$errno = 0;
$errstr = '';

// error_handle
register_shutdown_function('xn_shutdown_handle');
set_error_handler('error_handle', -1);
empty($conf['timezone']) AND $conf['timezone'] = 'Asia/Shanghai';
date_default_timezone_set($conf['timezone']);

// 超级全局变量
$_GET += xn_init_query_string();
$_REQUEST = array_merge($_COOKIE, $_POST, $_GET);

// 初始化 db cache，这里并没有连接，在获取数据的时候会自动连接。
$db = !empty($conf['db']) ? db_new($conf['db']) : NULL;
$cache = !empty($conf['cache']) ? cache_new($conf['cache']) : NULL;
$db AND $db->errno AND xn_message(-1, $db->errstr); // 安装的时候检测过了，不必每次都检测。但是要考虑环境移植。
$cache AND $cache->errno AND xn_message(-1, $cache->errstr);

?>